BUNDLER_BIN_PATH=""

# see BUNDLE_BIN is set in the current directories .bundle/config
grep BUNDLE_BIN .bundle/config 2>/dev/null
if [[ $? == 0 ]]; then
  BUNDLER_BIN_PATH=`grep BUNDLE_BIN .bundle/config | cut -d ' ' -f 2 -`
  # Expand the bundler stub path
  eval BUNDLER_BIN_PATH=$BUNDLER_BIN_PATH
  if [[ $path[1] == $BUNDLER_BIN_PATH ]]; then
    # Already there
    echo Already on path
  else
    # Ruby hack to check if the bundler stub path is in the current directory.
    local_path_check="exit(1) if /^#{Dir.getwd}/=~ '${BUNDLER_BIN_PATH}'"
    ruby -e"${local_path_check}"
    if [[ $? == 0 ]]; then
      export PATH=$BUNDLER_BIN_PATH:$PATH
      export LAST_BUNDLER_BIN_PATH=$BUNDLER_BIN_PATH
    else
      # Prompt the user before adding a bin directory in the current (project) directory to the path
      echo -n "The bundler binstubs directory is in the current directory, this may be unsafe. Are you sure you want to add it to the path(Y/N)? "
      trusted=0
      while (( ! trusted ));do
        printf "%s" '  Yes or No: [y/N]? '
        read response
        value="$(echo -n "${response}" | tr '[[:upper:]]' '[[:lower:]]' | __rvm_strip)"

        case "${value:-n}" in
          y|yes)
          trusted=1
          ;;
          n|no)
          break
          ;;
        esac
      done

      if (( trusted )); then
        export PATH=$BUNDLER_BIN_PATH:$PATH
        export LAST_BUNDLER_BIN_PATH=$BUNDLER_BIN_PATH
      fi
    fi
  fi 
else
  # There is no BUNDLE_BIN setting
  if [[ ${LAST_BUNDLER_BIN_PATH:-1} == "1" ]];then
    # No old path set
  else
    # More ruby hackery to remove the old bundle bin path
    export PATH=`ruby -e'puts ENV["LAST_BUNDLER_BIN_PATH"] ? ENV["PATH"].sub(/^#{ENV["LAST_BUNDLER_BIN_PATH"]}:?/, "") : ENV["PATH"]'`
  fi
fi