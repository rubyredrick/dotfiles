. ~/bin/dotfiles/bash/colors
function set_window_and_tab_title
{
    local title="$1"
    if [[ -z "$title" ]]; then
        title="root"
    fi
 
    local tmpdir=~/Library/Caches/${FUNCNAME}_temp
    local cmdfile="$tmpdir/$title"
 
    # Set window title
    echo -n -e "\033]0;${title}\a"
 
    # Set tab title
    if [[ -n ${CURRENT_TAB_TITLE_PID:+1} ]]; then
        kill $CURRENT_TAB_TITLE_PID
    fi
    mkdir -p $tmpdir
    ln /bin/sleep "$cmdfile"
    "$cmdfile" 10 &
    CURRENT_TAB_TITLE_PID=$(jobs -x echo %+)
    disown %+
    kill -STOP $CURRENT_TAB_TITLE_PID
    command rm -f "$cmdfile"
}

# Get the current git branch, if there is one
function parse_git_branch {
 git rev-parse --git-dir &> /dev/null
 git_status="$(git status 2> /dev/null)"
 branch_pattern="^# On branch ([^${IFS}]*)"
 remote_pattern="# Your branch is (.*) of"
 diverge_pattern="# Your branch and (.*) have diverged"
 if [[ ! ${git_status}} =~ "working directory clean" ]]; then
   state="${RED}⚡"
 fi
 # add an else if or two here if you want to get more specific
 if [[ ${git_status} =~ ${remote_pattern} ]]; then
   if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
     remote="${YELLOW}↑"
   else
     remote="${YELLOW}↓"
   fi
 fi
 if [[ ${git_status} =~ ${diverge_pattern} ]]; then
   remote="${YELLOW}↕"
 fi
 if [[ ${git_status} =~ ${branch_pattern} ]]; then
   branch=${BASH_REMATCH[1]}
   echo " git:${branch}${remote}${state}"
 fi
}

function parse_vc_branch {
  local g="$(git rev-parse --git-dir 2>/dev/null)"
	if [ -n "$g" ]; then
	  parse_git_branch
	  else
	  echo " $(vcprompt)"
  fi
}
 
function prompt_func() {
 previous_return_value=$?;
 prompt="${TITLEBAR}${LIGHT_GRAY}\W${YELLOW}$(parse_vc_branch)${NO_COLOR}"
 if test $previous_return_value -eq 0
 then
   PS1="${GREEN}➜ ${NO_COLOR}${prompt}${GREEN} \$${NO_COLOR} "
 else
   PS1="${RED}➜ ${NO_COLOR}${prompt}${RED} \$${NO_COLOR} "
 fi
 set_window_and_tab_title "${PWD##*/}"
}
 
PROMPT_COMMAND=prompt_func

unset append